name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  DOCKER_IMAGE: attensys/seat-ui
  NODE_VERSION: '20'

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run linting
        run: bun run lint

      - name: Check formatting
        run: bun run format:check

      - name: Build application
        run: bun run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: dist/
          retention-days: 1

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'release'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_IMAGE }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying ${{ env.DOCKER_IMAGE }}:develop to staging environment"
          # Add your staging deployment commands here
          # Example: kubectl set image deployment/seat-ui seat-ui=${{ env.DOCKER_IMAGE }}:develop

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, docker-build, security-scan]
    if: github.event_name == 'release'
    environment: production

    steps:
      - name: Deploy to production
        run: |
          echo "üöÄ Deploying ${{ env.DOCKER_IMAGE }}:${{ github.event.release.tag_name }} to production environment"
          # Add your production deployment commands here
          # Example: kubectl set image deployment/seat-ui seat-ui=${{ env.DOCKER_IMAGE }}:${{ github.event.release.tag_name }}

  notification:
    name: Notify
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    if: always()

    steps:
      - name: Notify on success
        if: needs.test.result == 'success' && needs.docker-build.result == 'success'
        run: |
          echo "‚úÖ CI/CD Pipeline completed successfully!"
          echo "üê≥ Docker image pushed: ${{ env.DOCKER_IMAGE }}"

      - name: Notify on failure
        if: needs.test.result == 'failure' || needs.docker-build.result == 'failure'
        run: |
          echo "‚ùå CI/CD Pipeline failed!"
          echo "Please check the logs for more details."
